// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_guidelines/test/widget_test/screens/login/login_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i7;
import 'package:flutter_guidelines/blocs/index.dart' as _i3;
import 'package:flutter_guidelines/repositories/auth_repository.dart' as _i4;
import 'package:flutter_guidelines/screens/login/login_form_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stx_flutter_form_bloc/stx_flutter_form_bloc.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextFieldBloc_0 extends _i1.SmartFake implements _i2.TextFieldBloc {
  _FakeTextFieldBloc_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthBloc_1 extends _i1.SmartFake implements _i3.AuthBloc {
  _FakeAuthBloc_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_2 extends _i1.SmartFake
    implements _i4.AuthRepository {
  _FakeAuthRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormBlocState_3<SuccessResponse, FailureResponse> extends _i1
    .SmartFake implements _i2.FormBlocState<SuccessResponse, FailureResponse> {
  _FakeFormBlocState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginFormBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginFormBloc extends _i1.Mock implements _i5.LoginFormBloc {
  @override
  _i2.TextFieldBloc get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _FakeTextFieldBloc_0(
          this,
          Invocation.getter(#username),
        ),
        returnValueForMissingStub: _FakeTextFieldBloc_0(
          this,
          Invocation.getter(#username),
        ),
      ) as _i2.TextFieldBloc);

  @override
  set username(_i2.TextFieldBloc? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TextFieldBloc get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _FakeTextFieldBloc_0(
          this,
          Invocation.getter(#password),
        ),
        returnValueForMissingStub: _FakeTextFieldBloc_0(
          this,
          Invocation.getter(#password),
        ),
      ) as _i2.TextFieldBloc);

  @override
  set password(_i2.TextFieldBloc? _password) => super.noSuchMethod(
        Invocation.setter(
          #password,
          _password,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.AuthBloc get authBloc => (super.noSuchMethod(
        Invocation.getter(#authBloc),
        returnValue: _FakeAuthBloc_1(
          this,
          Invocation.getter(#authBloc),
        ),
        returnValueForMissingStub: _FakeAuthBloc_1(
          this,
          Invocation.getter(#authBloc),
        ),
      ) as _i3.AuthBloc);

  @override
  _i4.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAuthRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.AuthRepository);

  @override
  bool get customSubmit => (super.noSuchMethod(
        Invocation.getter(#customSubmit),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Stream<_i2.FormStatus> get statusStream => (super.noSuchMethod(
        Invocation.getter(#statusStream),
        returnValue: _i6.Stream<_i2.FormStatus>.empty(),
        returnValueForMissingStub: _i6.Stream<_i2.FormStatus>.empty(),
      ) as _i6.Stream<_i2.FormStatus>);

  @override
  set statusStream(_i6.Stream<_i2.FormStatus>? _statusStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #statusStream,
          _statusStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i6.StreamSubscription<dynamic>> get subscriptions =>
      (super.noSuchMethod(
        Invocation.getter(#subscriptions),
        returnValue: <_i6.StreamSubscription<dynamic>>[],
        returnValueForMissingStub: <_i6.StreamSubscription<dynamic>>[],
      ) as List<_i6.StreamSubscription<dynamic>>);

  @override
  set subscriptions(List<_i6.StreamSubscription<dynamic>>? _subscriptions) =>
      super.noSuchMethod(
        Invocation.setter(
          #subscriptions,
          _subscriptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isEditing => (super.noSuchMethod(
        Invocation.getter(#isEditing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isCreating => (super.noSuchMethod(
        Invocation.getter(#isCreating),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isValid => (super.noSuchMethod(
        Invocation.getter(#isValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isNotValid => (super.noSuchMethod(
        Invocation.getter(#isNotValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Map<String, _i2.FieldBloc<_i2.FieldBlocStateBase>> get fields =>
      (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <String, _i2.FieldBloc<_i2.FieldBlocStateBase>>{},
        returnValueForMissingStub: <String,
            _i2.FieldBloc<_i2.FieldBlocStateBase>>{},
      ) as Map<String, _i2.FieldBloc<_i2.FieldBlocStateBase>>);

  @override
  _i2.FormBlocState<String, String> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFormBlocState_3<String, String>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeFormBlocState_3<String, String>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.FormBlocState<String, String>);

  @override
  _i6.Stream<_i2.FormBlocState<String, String>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i2.FormBlocState<String, String>>.empty(),
        returnValueForMissingStub:
            _i6.Stream<_i2.FormBlocState<String, String>>.empty(),
      ) as _i6.Stream<_i2.FormBlocState<String, String>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void addField(_i2.FieldBloc<_i2.FieldBlocStateBase>? field) =>
      super.noSuchMethod(
        Invocation.method(
          #addField,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addFields(Iterable<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fields) =>
      super.noSuchMethod(
        Invocation.method(
          #addFields,
          [fields],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeField(_i2.FieldBloc<_i2.FieldBlocStateBase>? field) =>
      super.noSuchMethod(
        Invocation.method(
          #removeField,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFields(Iterable<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fields) =>
      super.noSuchMethod(
        Invocation.method(
          #removeFields,
          [fields],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSubscription(_i6.StreamSubscription<dynamic>? subscription) =>
      super.noSuchMethod(
        Invocation.method(
          #addSubscription,
          [subscription],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSubscriptions(
          Iterable<_i6.StreamSubscription<dynamic>>? subscriptions) =>
      super.noSuchMethod(
        Invocation.method(
          #addSubscriptions,
          [subscriptions],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelAllSubscriptions() => super.noSuchMethod(
        Invocation.method(
          #cancelAllSubscriptions,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.FutureOr<void> onInitialize(Map<String, dynamic>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #onInitialize,
          [params],
        ),
        returnValueForMissingStub: null,
      ) as _i6.FutureOr<void>);

  @override
  void emitInitial() => super.noSuchMethod(
        Invocation.method(
          #emitInitial,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitLoading() => super.noSuchMethod(
        Invocation.method(
          #emitLoading,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitSuccess(String? response) => super.noSuchMethod(
        Invocation.method(
          #emitSuccess,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitFailure([String? error]) => super.noSuchMethod(
        Invocation.method(
          #emitFailure,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitCancelled() => super.noSuchMethod(
        Invocation.method(
          #emitCancelled,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i2.FormBlocState<String, String>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i2.FormBlocState<String, String>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
