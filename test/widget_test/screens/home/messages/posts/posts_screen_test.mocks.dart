// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_guidelines/test/widget_test/screens/home/messages/posts/posts_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

import 'package:flutter_guidelines/models/index.dart' as _i3;
import 'package:flutter_guidelines/repositories/index.dart' as _i2;

import 'package:flutter_guidelines/screens/home/messages/posts/posts_bloc.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostsRepository_0 extends _i1.SmartFake
    implements _i2.PostsRepository {
  _FakePostsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkState_1<T> extends _i1.SmartFake
    implements _i3.NetworkState<T> {
  _FakeNetworkState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePost_2 extends _i1.SmartFake implements _i3.Post {
  _FakePost_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsBloc extends _i1.Mock implements _i4.PostsBloc {
  @override
  _i2.PostsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePostsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakePostsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PostsRepository);
  @override
  _i3.NetworkState<List<_i3.Post>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.NetworkState<List<_i3.Post>>);
  @override
  _i5.Stream<_i3.NetworkState<List<_i3.Post>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.NetworkState<List<_i3.Post>>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i3.NetworkState<List<_i3.Post>>>.empty(),
      ) as _i5.Stream<_i3.NetworkState<List<_i3.Post>>>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<List<_i3.Post>> onLoadAsync() => (super.noSuchMethod(
        Invocation.method(
          #onLoadAsync,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);
  @override
  bool equals(
    _i3.Post? item1,
    _i3.Post? item2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #equals,
          [
            item1,
            item2,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i3.NetworkEventBase? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.NetworkEventBase? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.NetworkState<List<_i3.Post>>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.NetworkEventBase>(
    _i6.EventHandler<E, _i3.NetworkState<List<_i3.Post>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i3.NetworkEventBase,
                  _i3.NetworkState<List<_i3.Post>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.NetworkState<List<_i3.Post>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void load() => super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void update(List<_i3.Post>? updatedData) => super.noSuchMethod(
        Invocation.method(
          #update,
          [updatedData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateAsync(List<_i3.Post>? updatedData) => super.noSuchMethod(
        Invocation.method(
          #updateAsync,
          [updatedData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i3.Post>> onUpdateAsync(List<_i3.Post>? updatedData) =>
      (super.noSuchMethod(
        Invocation.method(
          #onUpdateAsync,
          [updatedData],
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);
  @override
  _i3.NetworkState<List<_i3.Post>> onStateChanged(
    _i3.DataChangeReason? reason,
    _i3.NetworkState<List<_i3.Post>>? state,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [
            reason,
            state,
          ],
        ),
        returnValue: _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #onStateChanged,
            [
              reason,
              state,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #onStateChanged,
            [
              reason,
              state,
            ],
          ),
        ),
      ) as _i3.NetworkState<List<_i3.Post>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> getAsync() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #getAsync,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #getAsync,
            [],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> initLoadAsyncFuture() =>
      (super.noSuchMethod(
        Invocation.method(
          #initLoadAsyncFuture,
          [],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #initLoadAsyncFuture,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #initLoadAsyncFuture,
            [],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> loadAsyncFuture() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAsyncFuture,
          [],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #loadAsyncFuture,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #loadAsyncFuture,
            [],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> updateAsyncFuture(
          List<_i3.Post>? updatedData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAsyncFuture,
          [updatedData],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #updateAsyncFuture,
            [updatedData],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #updateAsyncFuture,
            [updatedData],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  void network() => super.noSuchMethod(
        Invocation.method(
          #network,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.FutureOr<void> onEventLoadAsync(
    _i3.NetworkEventLoadAsync? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventLoadAsync,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventUpdate(
    _i3.NetworkEventUpdate<dynamic>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventUpdate,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventUpdateAsync(
    _i3.NetworkEventUpdateAsync<dynamic>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventUpdateAsync,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  void addItem(
    _i3.Post? newItem, [
    _i3.AddPosition? position = _i3.AddPosition.end,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addItem,
          [
            newItem,
            position,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addItemAsync(
    _i3.Post? newItem, [
    _i3.AddPosition? position = _i3.AddPosition.end,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addItemAsync,
          [
            newItem,
            position,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void editItem(_i3.Post? updatedItem) => super.noSuchMethod(
        Invocation.method(
          #editItem,
          [updatedItem],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void editItemAsync(_i3.Post? updatedItem) => super.noSuchMethod(
        Invocation.method(
          #editItemAsync,
          [updatedItem],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeItem(_i3.Post? removedItem) => super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [removedItem],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeItemAsync(_i3.Post? removedItem) => super.noSuchMethod(
        Invocation.method(
          #removeItemAsync,
          [removedItem],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Post> onAddItemAsync(_i3.Post? newItem) => (super.noSuchMethod(
        Invocation.method(
          #onAddItemAsync,
          [newItem],
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_2(
          this,
          Invocation.method(
            #onAddItemAsync,
            [newItem],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Post>.value(_FakePost_2(
          this,
          Invocation.method(
            #onAddItemAsync,
            [newItem],
          ),
        )),
      ) as _i5.Future<_i3.Post>);
  @override
  _i5.Future<_i3.Post> onEditItemAsync(_i3.Post? updatedItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEditItemAsync,
          [updatedItem],
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_2(
          this,
          Invocation.method(
            #onEditItemAsync,
            [updatedItem],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Post>.value(_FakePost_2(
          this,
          Invocation.method(
            #onEditItemAsync,
            [updatedItem],
          ),
        )),
      ) as _i5.Future<_i3.Post>);
  @override
  _i5.Future<bool> onRemoveItemAsync(_i3.Post? removedItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #onRemoveItemAsync,
          [removedItem],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> addItemAsyncFuture(
          _i3.Post? newItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItemAsyncFuture,
          [newItem],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #addItemAsyncFuture,
            [newItem],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #addItemAsyncFuture,
            [newItem],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> editItemAsyncFuture(
          _i3.Post? updatedItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #editItemAsyncFuture,
          [updatedItem],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #editItemAsyncFuture,
            [updatedItem],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #editItemAsyncFuture,
            [updatedItem],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.Future<_i3.NetworkState<List<_i3.Post>>> removeItemAsyncFuture(
          _i3.Post? removedItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItemAsyncFuture,
          [removedItem],
        ),
        returnValue: _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
            _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #removeItemAsyncFuture,
            [removedItem],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.NetworkState<List<_i3.Post>>>.value(
                _FakeNetworkState_1<List<_i3.Post>>(
          this,
          Invocation.method(
            #removeItemAsyncFuture,
            [removedItem],
          ),
        )),
      ) as _i5.Future<_i3.NetworkState<List<_i3.Post>>>);
  @override
  _i5.FutureOr<void> onEventAddItem(
    _i3.NetworkEventAddItem<_i3.Post>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventAddItem,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventAddItemAsync(
    _i3.NetworkEventAddItemAsync<_i3.Post>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventAddItemAsync,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventEditItem(
    _i3.NetworkEventEditItem<_i3.Post>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventEditItem,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventEditItemAsync(
    _i3.NetworkEventEditItemAsync<_i3.Post>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventEditItemAsync,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventRemoveItem(
    _i3.NetworkEventRemoveItem<dynamic>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventRemoveItem,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
  @override
  _i5.FutureOr<void> onEventRemoveItemAsync(
    _i3.NetworkEventRemoveItemAsync<dynamic>? event,
    _i6.Emitter<_i3.NetworkStateBase<List<_i3.Post>>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #onEventRemoveItemAsync,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      ) as _i5.FutureOr<void>);
}
